# Generated by Django 5.1.11 on 2025-09-07 23:53

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('session_datetime', models.DateTimeField()),
                ('session_duration', models.IntegerField(default=60)),
                ('session_type', models.CharField(choices=[('video', 'Video'), ('audio', 'Audio'), ('in_person', 'In-Person')], default='video', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('payment_intent_id', models.CharField(blank=True, max_length=100)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('authorized', 'Authorized'), ('captured', 'Captured'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('session_link', models.URLField(blank=True)),
                ('session_metadata', models.JSONField(blank=True, default=dict)),
                ('confirmation_sent', models.BooleanField(default=False)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_appointments', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_appointments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'appointments',
            },
        ),
        migrations.CreateModel(
            name='AppointmentCancellation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('refund_requested', models.BooleanField(default=False)),
                ('refund_processed', models.BooleanField(default=False)),
                ('refund_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cancellation', to='core.appointment')),
                ('cancelled_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cancelled_appointments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentReschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_datetime', models.DateTimeField()),
                ('new_datetime', models.DateTimeField()),
                ('reason', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('original_appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reschedule_history', to='core.appointment')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_reschedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('read', 'Read'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('failed_login', 'Failed Login'), ('profile_update', 'Profile Update'), ('appointment_book', 'Appointment Book'), ('appointment_cancel', 'Appointment Cancel'), ('match_view', 'Match View'), ('message_send', 'Message Send')], db_index=True, max_length=50)),
                ('resource_type', models.CharField(help_text='Model name or resource type affected', max_length=100)),
                ('resource_id', models.CharField(blank=True, help_text='ID of the affected resource', max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details about the action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AvailabilityException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('is_available', models.BooleanField(default=False)),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_exceptions', to='users.therapistprofile')),
            ],
        ),
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(db_index=True, max_length=100)),
                ('metric_value', models.FloatField()),
                ('metric_unit', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_name', 'timestamp'], name='core_system_metric__a98187_idx')],
            },
        ),
        migrations.CreateModel(
            name='TherapistAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='users.therapistprofile')),
            ],
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['patient', 'session_datetime'], name='appointment_patient_cd6bb9_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['therapist', 'session_datetime'], name='appointment_therapi_1f5ae7_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['status', 'session_datetime'], name='appointment_status_98aadd_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['session_datetime', 'status'], name='appointment_session_e76540_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'timestamp'], name='core_auditl_user_id_7b678c_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action', 'timestamp'], name='core_auditl_action_096de0_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['resource_type', 'resource_id'], name='core_auditl_resourc_a674ad_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityexception',
            index=models.Index(fields=['therapist', 'date'], name='core_availa_therapi_e1436e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='availabilityexception',
            unique_together={('therapist', 'date', 'start_time')},
        ),
        migrations.AddIndex(
            model_name='therapistavailability',
            index=models.Index(fields=['therapist', 'weekday', 'is_available'], name='core_therap_therapi_bb9060_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='therapistavailability',
            unique_together={('therapist', 'weekday', 'start_time')},
        ),
    ]
