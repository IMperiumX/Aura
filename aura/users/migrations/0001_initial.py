# Generated by Django 5.1.11 on 2025-09-07 23:49

import aura.core.fields
import aura.users.models
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=150, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('user_type', models.CharField(choices=[('patient', 'Patient'), ('therapist', 'Therapist')], default='patient', max_length=20, verbose_name='User Type')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has been verified.', verbose_name='Verified')),
                ('terms_accepted', models.BooleanField(default=False, help_text='Designates whether this user has accepted terms of service.', verbose_name='Terms Accepted')),
                ('privacy_policy_accepted', models.BooleanField(default=False, help_text='Designates whether this user has accepted privacy policy.', verbose_name='Privacy Policy Accepted')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', aura.users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar_url', models.CharField(max_length=120, verbose_name='avatar url')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('m', ' Male'), ('f', 'Female')], max_length=1)),
                ('certification', models.CharField(max_length=100)),
                ('areas_of_expertise', models.CharField(max_length=25)),
                ('coaching_philosophy', models.TextField(blank=True)),
                ('availability', models.JSONField(blank=True, null=True, verbose_name='Availability Schedule')),
                ('rating', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=3, verbose_name='Rating')),
                ('specialization', models.CharField(max_length=100)),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Weight (kg)')),
                ('height', models.FloatField(blank=True, null=True, verbose_name='Height (cm)')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Coaches',
                'order_with_respect_to': 'rating',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_range', aura.core.fields.EncryptedCharField(choices=[('18-25', '18-25'), ('26-35', '26-35'), ('36-45', '36-45'), ('46-55', '46-55'), ('56-65', '56-65'), ('65+', '65+')], help_text="Patient's age range", max_length=20)),
                ('gender', aura.core.fields.EncryptedCharField(choices=[('male', 'Male'), ('female', 'Female'), ('non-binary', 'Non-binary'), ('prefer-not-to-say', 'Prefer not to say')], help_text="Patient's gender", max_length=20)),
                ('location', aura.core.fields.EncryptedCharField(help_text="Patient's location (city, state)", max_length=200)),
                ('timezone', models.CharField(default='America/New_York', help_text="Patient's timezone", max_length=50)),
                ('session_format', aura.core.fields.EncryptedJSONField(default=list, help_text='Preferred session formats')),
                ('frequency', aura.core.fields.EncryptedCharField(choices=[('weekly', 'Weekly'), ('bi-weekly', 'Bi-weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20)),
                ('session_duration', models.IntegerField(default=60, help_text='Preferred session duration in minutes')),
                ('budget_range', aura.core.fields.EncryptedCharField(help_text="Budget range (e.g., '100-150')", max_length=50)),
                ('primary_concerns', aura.core.fields.EncryptedJSONField(default=list, help_text='Primary mental health concerns')),
                ('therapy_types', aura.core.fields.EncryptedJSONField(default=list, help_text='Preferred therapy types (CBT, DBT, etc.)')),
                ('previous_therapy', models.BooleanField(default=False, help_text='Has previous therapy experience')),
                ('crisis_support_needed', models.BooleanField(default=False, help_text='Needs crisis support')),
                ('therapist_gender_preference', aura.core.fields.EncryptedCharField(choices=[('male', 'Male'), ('female', 'Female'), ('no_preference', 'No Preference')], default='no_preference', max_length=20)),
                ('therapist_age_preference', aura.core.fields.EncryptedCharField(choices=[('male', 'Male'), ('female', 'Female'), ('no_preference', 'No Preference')], default='no_preference', max_length=20)),
                ('cultural_background', aura.core.fields.EncryptedJSONField(default=list, help_text='Preferred cultural backgrounds')),
                ('languages', aura.core.fields.EncryptedJSONField(default=aura.users.models.default_languages, help_text='Preferred languages')),
                ('profile_completed', models.BooleanField(default=False)),
                ('matching_enabled', models.BooleanField(default=False)),
                ('embeddings_generated', models.BooleanField(default=False)),
                ('profile_embeddings', models.JSONField(blank=True, help_text='Vector embeddings for matching algorithm', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patient_profiles',
                'indexes': [models.Index(fields=['user', 'profile_completed'], name='patient_pro_user_id_85ed60_idx'), models.Index(fields=['matching_enabled', 'created_at'], name='patient_pro_matchin_83be7a_idx')],
            },
        ),
        migrations.CreateModel(
            name='TherapistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', aura.core.fields.EncryptedCharField(help_text='Professional license number', max_length=100)),
                ('license_state', aura.core.fields.EncryptedCharField(help_text='State where licensed', max_length=5)),
                ('years_experience', models.IntegerField(help_text='Years of professional experience')),
                ('credentials', aura.core.fields.EncryptedJSONField(default=list, help_text='Professional credentials')),
                ('specializations', aura.core.fields.EncryptedJSONField(default=list, help_text='Areas of specialization')),
                ('therapeutic_approaches', aura.core.fields.EncryptedJSONField(default=list, help_text='Therapeutic approaches used')),
                ('session_formats', aura.core.fields.EncryptedJSONField(default=list, help_text='Available session formats')),
                ('languages', aura.core.fields.EncryptedJSONField(default=aura.users.models.default_languages, help_text='Languages spoken')),
                ('age_groups', aura.core.fields.EncryptedJSONField(default=list, help_text='Age groups served')),
                ('timezone', models.CharField(default='America/New_York', help_text="Therapist's timezone", max_length=50)),
                ('session_duration', aura.core.fields.EncryptedJSONField(default=aura.users.models.default_session_duration, help_text='Available session durations')),
                ('weekly_hours', models.IntegerField(default=40, help_text='Hours available per week')),
                ('evening_availability', models.BooleanField(default=False, help_text='Available during evening hours')),
                ('weekend_availability', models.BooleanField(default=False, help_text='Available during weekends')),
                ('base_rate', aura.core.fields.EncryptedCharField(help_text='Base rate per session', max_length=10)),
                ('sliding_scale_available', models.BooleanField(default=False, help_text='Offers sliding scale pricing')),
                ('insurance_accepted', aura.core.fields.EncryptedJSONField(default=list, help_text='Insurance providers accepted')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('verification_documents', aura.core.fields.EncryptedJSONField(blank=True, default=dict, help_text='Uploaded verification documents')),
                ('verified_at', models.DateTimeField(blank=True, help_text='Date when verification was completed', null=True)),
                ('profile_completed', models.BooleanField(default=False)),
                ('available_for_matching', models.BooleanField(default=False)),
                ('embeddings_generated', models.BooleanField(default=False)),
                ('profile_embeddings', models.JSONField(blank=True, help_text='Vector embeddings for matching algorithm', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified the therapist', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_therapists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'therapist_profiles',
                'indexes': [models.Index(fields=['user', 'verification_status'], name='therapist_p_user_id_b30d0e_idx'), models.Index(fields=['available_for_matching', 'created_at'], name='therapist_p_availab_9eeae7_idx'), models.Index(fields=['verification_status', 'profile_completed'], name='therapist_p_verific_3534c6_idx')],
            },
        ),
    ]
