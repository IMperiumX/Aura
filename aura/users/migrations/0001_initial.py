# Generated by Django 5.1.11 on 2025-09-07 08:51

import aura.users.managers
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import taggit.managers
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('mentalhealth', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', aura.users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar_url', models.CharField(max_length=120, verbose_name='avatar url')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('m', ' Male'), ('f', 'Female')], max_length=1)),
                ('certification', models.CharField(max_length=100)),
                ('areas_of_expertise', models.CharField(max_length=25)),
                ('coaching_philosophy', models.TextField(blank=True)),
                ('availability', models.JSONField(blank=True, null=True, verbose_name='Availability Schedule')),
                ('rating', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=3, verbose_name='Rating')),
                ('specialization', models.CharField(max_length=100)),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Weight (kg)')),
                ('height', models.FloatField(blank=True, null=True, verbose_name='Height (cm)')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Coaches',
                'order_with_respect_to': 'rating',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar_url', models.CharField(max_length=120, verbose_name='avatar url')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('m', ' Male'), ('f', 'Female')], max_length=1)),
                ('medical_record_number', models.CharField(max_length=50)),
                ('insurance_provider', models.CharField(max_length=100)),
                ('insurance_policy_number', models.CharField(max_length=50)),
                ('emergency_contact_name', models.CharField(max_length=100)),
                ('emergency_contact_phone', models.CharField(max_length=30)),
                ('allergies', models.TextField()),
                ('medical_conditions', models.TextField()),
                ('medical_history', models.JSONField(blank=True, null=True)),
                ('current_medications', models.JSONField(blank=True, null=True)),
                ('health_data', models.JSONField(blank=True, null=True)),
                ('preferences', models.JSONField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Weight (kg)')),
                ('height', models.FloatField(blank=True, null=True, verbose_name='Height (cm)')),
                ('disorders', models.ManyToManyField(related_name='patients', to='mentalhealth.disorder', verbose_name='Disorders')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Patients',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Therapist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar_url', models.CharField(max_length=120, verbose_name='avatar url')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('m', ' Male'), ('f', 'Female')], max_length=1)),
                ('license_number', models.CharField(max_length=50)),
                ('years_of_experience', models.PositiveIntegerField(default=0, verbose_name='Years of Experience')),
                ('availability', models.JSONField(blank=True, null=True, verbose_name='Availability Schedule')),
                ('specialties', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Therapists',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
