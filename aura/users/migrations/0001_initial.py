# Generated by Django 5.0.6 on 2024-08-03 18:40

import aura.users.fields
import aura.users.managers
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import model_utils.fields
import taggit.managers
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models

from pgvector.django import HnswIndex
from pgvector.django import VectorField
from pgvector.django import VectorExtension
class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("mentalhealth", "0001_initial"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
    ]

    operations = [
        VectorExtension(),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Name of User"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=100, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "is_password_expired",
                    models.BooleanField(
                        default=False,
                        help_text="If set to true then the user needs to change the password on next sign in.",
                        verbose_name="password expired",
                    ),
                ),
                (
                    "last_password_change",
                    models.DateTimeField(
                        help_text="The date the password was changed last.",
                        null=True,
                        verbose_name="date of last password change",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", aura.users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Coach",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "avatar_url",
                    models.CharField(max_length=120, verbose_name="avatar url"),
                ),
                ("bio", models.TextField(blank=True, verbose_name="Biography")),
                ("date_of_birth", models.DateField(null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", " Male"), ("f", "Female")], max_length=1
                    ),
                ),
                (
                    "embedding",
                    VectorField(dimensions=1024, null=True),
                ),
                ("certification", models.CharField(max_length=100)),
                ("areas_of_expertise", models.CharField(max_length=25)),
                ("coaching_philosophy", models.TextField(blank=True)),
                (
                    "availability",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Availability Schedule"
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        max_digits=3,
                        verbose_name="Rating",
                    ),
                ),
                ("specialization", models.CharField(max_length=100)),
                (
                    "weight",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Weight (kg)"
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Height (cm)"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Modified By",
                    ),
                ),
                (
                    "user",
                    aura.users.fields.AutoOneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Coaches",
                "order_with_respect_to": "rating",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "avatar_url",
                    models.CharField(max_length=120, verbose_name="avatar url"),
                ),
                ("bio", models.TextField(blank=True, verbose_name="Biography")),
                ("date_of_birth", models.DateField(null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", " Male"), ("f", "Female")], max_length=1
                    ),
                ),
                (
                    "embedding",
                    VectorField(dimensions=1024, null=True),
                ),
                ("medical_record_number", models.CharField(max_length=50)),
                ("insurance_provider", models.CharField(max_length=100)),
                ("insurance_policy_number", models.CharField(max_length=50)),
                ("emergency_contact_name", models.CharField(max_length=100)),
                ("emergency_contact_phone", models.CharField(max_length=30)),
                ("allergies", models.TextField()),
                ("medical_conditions", models.TextField()),
                ("medical_history", models.JSONField(blank=True, null=True)),
                ("current_medications", models.JSONField(blank=True, null=True)),
                ("health_data", models.JSONField(blank=True, null=True)),
                ("preferences", models.JSONField(blank=True, null=True)),
                (
                    "weight",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Weight (kg)"
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Height (cm)"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "disorders",
                    models.ManyToManyField(
                        blank=True, related_name="patients", to="mentalhealth.disorder"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Modified By",
                    ),
                ),
                (
                    "user",
                    aura.users.fields.AutoOneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Patients",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Physician",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "avatar_url",
                    models.CharField(max_length=120, verbose_name="avatar url"),
                ),
                ("bio", models.TextField(blank=True, verbose_name="Biography")),
                ("date_of_birth", models.DateField(null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", " Male"), ("f", "Female")], max_length=1
                    ),
                ),
                (
                    "embedding",
                    VectorField(dimensions=1024, null=True),
                ),
                ("license_number", models.CharField(max_length=50)),
                ("specialties", models.CharField(max_length=255)),
                (
                    "years_of_experience",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Years of Experience"
                    ),
                ),
                (
                    "availability",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Availability Schedule"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Modified By",
                    ),
                ),
                (
                    "user",
                    aura.users.fields.AutoOneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Physicians",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("gps", "Google Play Store"),
                            ("aas", "Apple App Store"),
                            ("web", "Web"),
                            ("email", "Email"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "topic",
                    models.CharField(
                        choices=[
                            ("therapy", "Therapy"),
                            ("psychiatry", "Psychiatry"),
                            ("coaching", "Coaching"),
                            ("mental_health", "Mental Health"),
                            ("wellness", "Wellness"),
                        ],
                        max_length=100,
                    ),
                ),
                ("rating", models.PositiveIntegerField()),
                ("content", models.TextField()),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Therapist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "avatar_url",
                    models.CharField(max_length=120, verbose_name="avatar url"),
                ),
                ("bio", models.TextField(blank=True, verbose_name="Biography")),
                ("date_of_birth", models.DateField(null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", " Male"), ("f", "Female")], max_length=1
                    ),
                ),
                (
                    "embedding",
                    VectorField(dimensions=1024, null=True),
                ),
                ("license_number", models.CharField(max_length=50)),
                (
                    "years_of_experience",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Years of Experience"
                    ),
                ),
                (
                    "availability",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Availability Schedule"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "specialties",
                    taggit.managers.TaggableManager(
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Modified By",
                    ),
                ),
                (
                    "user",
                    aura.users.fields.AutoOneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Therapists",
                "indexes": [
                    HnswIndex(
                        ef_construction=64,
                        fields=["embedding"],
                        m=16,
                        name="th_27072024_embedding_index",
                        opclasses=["vector_cosine_ops"],
                    )
                ],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
