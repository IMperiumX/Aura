# Logstash Pipeline for Aura Application Logs
# Processes structured JSON logs from Django application

input {
  # Beats input for Filebeat
  beats {
    port => 5044
    host => "0.0.0.0"
  }

  # Direct file input for local log files
  file {
    path => "/var/log/aura/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_aura"
    codec => "json"
    tags => ["aura", "file"]
  }

  # TCP input for direct application logging
  tcp {
    port => 5000
    codec => json_lines
    tags => ["aura", "tcp"]
  }

  # UDP input for high-throughput logging
  udp {
    port => 5000
    codec => json_lines
    tags => ["aura", "udp"]
  }
}

filter {
  # Parse timestamp if it's a string
  if [asctime] {
    date {
      match => [ "asctime", "yyyy-MM-dd HH:mm:ss,SSS", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Ensure correlation_id exists
  if ![correlation_id] {
    mutate {
      add_field => { "correlation_id" => "unknown" }
    }
  }

  # Parse and enrich user information
  if [user_id] and [user_id] != "anonymous" {
    mutate {
      add_field => { "user_authenticated" => true }
    }
  } else {
    mutate {
      add_field => { "user_authenticated" => false }
    }
  }

  # Categorize log levels
  if [levelname] {
    if [levelname] in ["ERROR", "CRITICAL"] {
      mutate {
        add_field => { "log_category" => "error" }
        add_field => { "alert_priority" => "high" }
      }
    } else if [levelname] == "WARNING" {
      mutate {
        add_field => { "log_category" => "warning" }
        add_field => { "alert_priority" => "medium" }
      }
    } else {
      mutate {
        add_field => { "log_category" => "info" }
        add_field => { "alert_priority" => "low" }
      }
    }
  }

  # Parse and enrich security events
  if [security_event] == true {
    mutate {
      add_field => { "event_type" => "security" }
    }

    # Add threat intelligence
    if [threat_type] {
      if [threat_type] == "authentication_failed" {
        mutate {
          add_field => { "security_category" => "authentication" }
          add_field => { "risk_score" => 3 }
        }
      } else if [threat_type] in ["sql_injection", "xss_attempt"] {
        mutate {
          add_field => { "security_category" => "injection" }
          add_field => { "risk_score" => 8 }
        }
      } else {
        mutate {
          add_field => { "security_category" => "general" }
          add_field => { "risk_score" => 5 }
        }
      }
    }
  }

  # Parse performance metrics
  if [request_duration] {
    # Convert to float if it's a string
    mutate {
      convert => { "request_duration" => "float" }
    }

    # Categorize request performance
    if [request_duration] > 5.0 {
      mutate {
        add_field => { "performance_category" => "very_slow" }
        add_field => { "performance_alert" => true }
      }
    } else if [request_duration] > 2.0 {
      mutate {
        add_field => { "performance_category" => "slow" }
        add_field => { "performance_alert" => true }
      }
    } else if [request_duration] > 1.0 {
      mutate {
        add_field => { "performance_category" => "moderate" }
      }
    } else {
      mutate {
        add_field => { "performance_category" => "fast" }
      }
    }
  }

  # Parse database query metrics
  if [db_queries] {
    mutate {
      convert => { "db_queries" => "integer" }
    }

    if [db_queries] > 20 {
      mutate {
        add_field => { "db_performance_alert" => true }
        add_field => { "db_category" => "high_query_count" }
      }
    } else if [db_queries] > 10 {
      mutate {
        add_field => { "db_category" => "moderate_query_count" }
      }
    } else {
      mutate {
        add_field => { "db_category" => "normal_query_count" }
      }
    }
  }

  # GeoIP enrichment for client IPs
  if [client_ip] and [client_ip] != "127.0.0.1" and [client_ip] != "system" {
    geoip {
      source => "client_ip"
      target => "geoip"
      add_field => { "geoip_enabled" => true }
    }
  }

  # User agent parsing
  if [user_agent] and [user_agent] != "system" {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }

  # Add environment and service metadata
  mutate {
    add_field => {
      "service" => "aura"
      "log_source" => "django"
      "index_pattern" => "aura-logs"
    }
  }

  # Convert numeric fields
  if [memory_percent] {
    mutate {
      convert => { "memory_percent" => "float" }
    }
  }

  if [cpu_percent] {
    mutate {
      convert => { "cpu_percent" => "float" }
    }
  }

  if [memory_rss] {
    mutate {
      convert => { "memory_rss" => "integer" }
    }
  }

  # Clean up and standardize fields
  mutate {
    remove_field => ["host", "agent", "ecs", "input", "log"]
    lowercase => ["method", "levelname"]
  }

  # Add processing timestamp
  mutate {
    add_field => { "processed_at" => "%{+YYYY-MM-dd'T'HH:mm:ss.SSSZ}" }
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    user => "elastic"
    password => "aura_elastic_password_2024"

    # Dynamic index naming based on date and log type
    index => "aura-logs-%{+YYYY.MM.dd}"

    # Document type and ID
    document_type => "_doc"

    # Template management
    manage_template => true
    template_name => "aura-logs"
    template_pattern => "aura-logs-*"
    template => "/usr/share/logstash/templates/aura-logs-template.json"
    template_overwrite => true

    # Performance settings
    workers => 2
    flush_size => 500
    idle_flush_time => 5
  }

  # Security events to separate index
  if [security_event] == true {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "aura_elastic_password_2024"
      index => "aura-security-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Performance issues to separate index
  if [performance_alert] == true {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "aura_elastic_password_2024"
      index => "aura-performance-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Debug output for development
  if "debug" in [tags] {
    stdout {
      codec => rubydebug
    }
  }
}
